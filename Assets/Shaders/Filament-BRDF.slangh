#pragma once

// ----------------------------------------------------------------
// Specular BRDF implementations.
// ----------------------------------------------------------------

float D_GGX(float roughness, float NoH, float3 halfDir)
{
    float oneMinusNoHSquared = 1.0 - NoH * NoH;
    float a = NoH * roughness;
    float k = roughness / (oneMinusNoHSquared + a * a);
    float d = k * k * (1.0 / PI);
    return d;
}

float V_SmithGGXCorrelated(float roughness, float NoV, float NoL)
{
    float a2 = roughness * roughness;
    float GGXL = NoV * sqrt((NoL - NoL * a2) * NoL + a2);
    float GGXV = NoL * sqrt((NoV - NoV * a2) * NoV + a2);
    return 0.5 / (GGXV + GGXL);
}

// Saves 2 sqrts but is mathematically wrong.
float V_SmithGGXCorrelatedFast(float roughness, float NoV, float NoL)
{
    return 0.5 / lerp(2 * NoL * NoV, NoL + NoV, roughness);
}

float3 F_Schlick(float3 f0, float f90, float VoH)
{
    return f0 + (f90 - f0) * pow(1 - VoH, 5);
}

float3 F_Schlick(float3 f0, float VoH)
{
    float f = pow(1.0 - VoH, 5.0);
    return f + f0 * (1 - f);
}

float F_Schlick(float f0, float f90, float VoH)
{
    return f0 + (f90 - f0) * pow(1 - VoH, 5);
}

// ----------------------------------------------------------------
// Diffuse BRDF implementations.
// ----------------------------------------------------------------

// Filament (Lambertian)
float Fd_Lambert()
{
    return 1.0 / PI;
}

// Disney (Burley)
float Fd_Burley(float roughness, float NoV, float NoL, float LoH)
{
    float f90 = 0.5 + 2.0 * roughness * LoH * LoH;
    float lightScatter = F_Schlick(1.0, f90, NoL);
    float viewScatter = F_Schlick(1.0, f90, NoV);
    return lightScatter * viewScatter / PI;
}