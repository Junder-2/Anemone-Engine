#pragma once

#include "Common.slangh"

struct Vertex
{
    float3 position;
    float uvX;
    float3 normal;
    float uvY;
    float4 color;
    float4 tangent;
};

struct PushConstants
{
    matrix<float, 4, 4> renderMatrix;
    matrix<float, 4, 4> modelMatrix;

    // Similar to a GLSL buffer_reference.
    // Uses uint64 pointer manipulation to index, hence the GL_EXT_shader_explicit_arithmetic_types_int64 dependency.
    ConstBufferPointer<Vertex> vertices;
};

// Uniform data across every shader drawn during a frame.
struct AppData
{
    float Time;
};

// Per-scene data.
struct SceneData
{
    float4 CameraPos;

    float4 AmbientColor;

    float4 SunlightDirection;
    float4 SunlightColor;
};

// Per-material data.
struct MaterialProperties
{
    float3 Color;
    float Normal;
    float3 Emission;
    float Metallic;
    float Roughness;
    float Reflectance;
    float Height;
    float Occlusion;

    Sampler2D ColorMap;
    Sampler2D NormalMap;
    Sampler2D ORMMap;

    Sampler2D LightDFG;
    SamplerCube SpecularIBL;
};

// Equivalent to GLSL push constants.
[[vk::push_constant]]
ConstantBuffer<PushConstants> pushConstants;

// Sets.
ParameterBlock<AppData> appData;
ParameterBlock<SceneData> sceneData;
ParameterBlock<MaterialProperties> props;

// Getters.
float4 GetColor(float2 uv)
{
    return GetColor(props, uv);
}

float4 GetColor(MaterialProperties props, float2 uv)
{
    float4 colorMap = props.ColorMap.Sample(uv);
    return colorMap;
}

float3 GetTangentSpaceNormal(float2 uv)
{
    return GetTangentSpaceNormal(props, uv);
}

float3 GetTangentSpaceNormal(MaterialProperties props, float2 uv)
{
    float3 normalMap = props.NormalMap.Sample(uv).rgb;
    return UnpackNormalMap(normalMap, .5);
}

float3 GetORM(float2 uv)
{
    return GetORM(props, uv);
}

float3 GetORM(MaterialProperties props, float2 uv)
{
    float3 ormMap = props.ORMMap.Sample(uv).rgb;
    float3 orm;
    //orm.x = lerp(1, ormMap.x, props.Occlusion);
    //orm.y = lerp(ormMap.y, 1, props.Roughness);
    //orm.z = lerp(0, ormMap.z, props.Metallic);

    orm.x = lerp(1, ormMap.x, 1);
    orm.y = lerp(ormMap.y, 1, 0);
    orm.z = lerp(0, ormMap.z, 1);

    return orm;
}