#pragma once

#include "Filament-BRDF.slangh"
#include "Filament-Input.slangh"
#include "Filament-Structs.slangh"

#define IBL_INTEGRATION_IMPORTANCE_SAMPLING_COUNT 64

// ----------------------------------------------------------------
// IBL utilities.
// ----------------------------------------------------------------

float3 DecodeDataForIBL(float4 data)
{
    return data.rgb;
}

// ----------------------------------------------------------------
// IBL prefiltered DFG term implementations.
// ----------------------------------------------------------------

float3 PrefilteredDFG_LUT(float lod, float NoV)
{
    // coord = sqrt(linear_roughness), which is the mapping used by cmgen.
    return props.LightDFG.SampleLevel(float2(NoV, lod), 0.0).rgb;
}

// ----------------------------------------------------------------
// IBL environment BRDF dispatch.
// ----------------------------------------------------------------

float3 PrefilteredDFG(float perceptualRoughness, float NoV)
{
    // PrefilteredDFG_LUT() takes a LOD, which is sqrt(roughness) = perceptualRoughness
    return PrefilteredDFG_LUT(perceptualRoughness, NoV);
}

// ----------------------------------------------------------------
// IBL Specular.
// ----------------------------------------------------------------

float3 GetSpecularDominantDirection(float3 n, float3 r, float roughness)
{
    return lerp(r, n, roughness * roughness);
}

float3 GetReflectedVector(Material mat, Fragment frag, float3 n)
{
    return GetSpecularDominantDirection(n, frag.reflected, mat.roughness);
}

// ----------------------------------------------------------------
// Prefiltered importance sampling.
// ----------------------------------------------------------------

float2 Hammersley(uint index)
{
    const uint numSamples = IBL_INTEGRATION_IMPORTANCE_SAMPLING_COUNT;
    const float invNumSamples = 1.0 / numSamples;
    const float tof = 0.5 / 0x80000000U;
    uint bits = index;
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float2(index * invNumSamples, bits * tof);
}

float3 ImportanceSamplingNdfDggx(float2 u, float roughness)
{
    // Importance sampling D_GGX
    float a2 = roughness * roughness;
    float phi = TAU * u.x;
    float cosTheta2 = (1 - u.y) / (1 + (a2 - 1) * u.y);
    float cosTheta = sqrt(cosTheta2);
    float sinTheta = sqrt(1 - cosTheta2);
    return float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
}

float3 HemisphereCosSample(float2 u)
{
    float phi = TAU * u.x;
    float cosTheta2 = 1 - u.y;
    float cosTheta = sqrt(cosTheta2);
    float sinTheta = sqrt(1 - cosTheta2);
    return float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
}

float PrefilteredImportanceSampling(float ipdf, float omegaP)
{
    // See: "Real-time Shading with Filtered Importance Sampling", Jaroslav Krivanek
    // Prefiltering doesn't work with anisotropy
    const float numSamples = IBL_INTEGRATION_IMPORTANCE_SAMPLING_COUNT;
    const float invNumSamples = 1.0 / numSamples;
    const float K = 4;
    float omegaS = invNumSamples * ipdf;
    float mipLevel = log2(K * omegaS / omegaP) * 0.5; // log4
    return mipLevel;
}

// ----------------------------------------------------------------
// IBL evaluation.
// ----------------------------------------------------------------

float3 IsEvaluateSpecularIBL(Material mat, Fragment frag, float NoV)
{
    const int numSamples = IBL_INTEGRATION_IMPORTANCE_SAMPLING_COUNT;
    const float invNumSamples = 1.0 / numSamples;
    const float3 up = float3(0, 0, 1);

    // TODO: for a true anisotropic BRDF, we need a real tangent space
    // tangent space
    float3x3 T;
    T[0] = normalize(cross(up, frag.normal));
    T[1] = cross(frag.normal, T[0]);
    T[2] = frag.normal;

    // Random rotation around N per mat
    const float3 m = float3(0.06711056, 0.00583715, 52.9829189);
    float a = TAU * frac(m.z * frac(dot(frag.uv, m.xy)));
    float c = cos(a);
    float s = sin(a);
    float3x3 R;
    R[0] = float3( c, s, 0);
    R[1] = float3(-s, c, 0);
    R[2] = float3( 0, 0, 1);
    T *= R;

    float roughness = mat.roughness;
    float specWidth, specHeight;
    props.SpecularIBL.GetDimensions(specWidth, specHeight);
    float dim = specWidth;
    float omegaP = (4 * PI) / (6 * dim * dim);

    float3 indirectSpecular = float3(0);
    for (int i = 0; i < numSamples; i++)
    {
        float2 u = Hammersley(i);
        float3 h = mul(T, ImportanceSamplingNdfDggx(u, roughness));

        // Since anisotropy doesn't work with prefiltering, we use the same "faux" anisotropy
        // we do when we use the prefiltered cubemap
        float3 l = GetReflectedVector(mat, frag, h);

        // Compute this sample's contribution to the brdf
        float NoL = saturate(dot(frag.normal, l));
        if (NoL > 0)
        {
            float NoH = dot(frag.normal, h);
            float LoH = saturate(dot(l, h));

            // PDF inverse (we must use D_GGX() here, which is used to generate samples)
            float ipdf = (4 * LoH) / (D_GGX(roughness, NoH, h) * NoH);
            float mipLevel = PrefilteredImportanceSampling(ipdf, omegaP);
            float3 L = DecodeDataForIBL(props.SpecularIBL.SampleLevel(l, mipLevel));

            float D = Distribution(roughness, NoH, h);
            float V = Visibility(roughness, NoV, NoL);
            float3 F = Fresnel(mat.f0, LoH);
            float3 Fr = F * (D * V * NoL * ipdf * invNumSamples);

            indirectSpecular += (Fr * L);
        }
    }

    return indirectSpecular;
}

float3 IsEvaluateDiffuseIBL(Material mat, Fragment frag)
{
    const int numSamples = IBL_INTEGRATION_IMPORTANCE_SAMPLING_COUNT;
    const float invNumSamples = 1.0 / numSamples;
    const float3 up = float3(0, 0, 1);

    float3 n = frag.normal;
    float3 v = frag.viewDir;

    // TODO: for a true anisotropic BRDF, we need a real tangent space
    // tangent space
    float3x3 T;
    T[0] = normalize(cross(up, n));
    T[1] = cross(n, T[0]);
    T[2] = n;

    // Random rotation around N per pixel
    const float3 m = float3(0.06711056, 0.00583715, 52.9829189);
    float a = TAU * frac(m.z * frac(dot(frag.uv, m.xy)));
    float c = cos(a);
    float s = sin(a);
    float3x3 R;
    R[0] = float3( c, s, 0);
    R[1] = float3(-s, c, 0);
    R[2] = float3( 0, 0, 1);
    T *= R;

    float specWidth, specHeight;
    props.SpecularIBL.GetDimensions(specWidth, specHeight);
    float dim = specWidth;
    float omegaP = (4 * PI) / (6 * dim * dim);

    float3 indirectDiffuse = float3(0);
    for (int i = 0; i < numSamples; i++)
    {
        float2 u = Hammersley(i);
        float3 h = mul(T, HemisphereCosSample(u));

        // Since anisotropy doesn't work with prefiltering, we use the same "faux" anisotropy
        // we do when we use the prefiltered cubemap
        float3 l = GetReflectedVector(mat, frag, h);

        // Compute this sample's contribution to the brdf
        float NoL = saturate(dot(n, l));
        if (NoL > 0)
        {
            // PDF inverse (we must use D_GGX() here, which is used to generate samples)
            float ipdf = PI / NoL;
            // we have to bias the mipLevel (+1) to help with very strong highlights
            float mipLevel = PrefilteredImportanceSampling(ipdf, omegaP) + 1;
            float3 L = DecodeDataForIBL(props.SpecularIBL.SampleLevel(l, mipLevel));
            indirectDiffuse += L;
        }
    }

    return indirectDiffuse * invNumSamples; // we bake 1/PI here, which cancels out
}

float3 EvaluateIBL(Material mat, Fragment frag)
{
    float NoV = saturate(dot(frag.normal, frag.viewDir));

    float3 Fr = IsEvaluateSpecularIBL(mat, frag, NoV);

    float3 diffuseIrradiance = IsEvaluateDiffuseIBL(mat, frag);
    float3 Fd = mat.diffuseColor * diffuseIrradiance;

    //Fr *= frameUniforms.iblLuminance;
    //Fd *= frameUniforms.iblLuminance;

    return Fr + Fd;
}