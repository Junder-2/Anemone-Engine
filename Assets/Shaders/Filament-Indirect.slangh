#pragma once

#include "Filament-BRDF.slangh"
#include "Filament-Input.slangh"
#include "Filament-Structs.slangh"

#define IBL_INTEGRATION_IMPORTANCE_SAMPLING_COUNT 64

// ----------------------------------------------------------------
// IBL utilities.
// ----------------------------------------------------------------

float3 DecodeDataForIBL(float4 data)
{
    return data.rgb;
}

// ----------------------------------------------------------------
// IBL prefiltered DFG term implementations.
// ----------------------------------------------------------------

float3 PrefilteredDFG_LUT(float lod, float NoV)
{
    // coord = sqrt(linear_roughness), which is the mapping used by cmgen.
    return props.LightDFG.SampleLevel(float2(NoV, lod), 0.0).rgb;
}

// ----------------------------------------------------------------
// IBL environment BRDF dispatch.
// ----------------------------------------------------------------

float3 PrefilteredDFG(float perceptualRoughness, float NoV)
{
    // PrefilteredDFG_LUT() takes a LOD, which is sqrt(roughness) = perceptualRoughness
    return PrefilteredDFG_LUT(perceptualRoughness, NoV);
}

//------------------------------------------------------------------------------
// IBL irradiance implementations
//------------------------------------------------------------------------------

const static float3 iblSH[9] = {
    float3( 0.785027623176575,  0.759127080440521,  0.699856698513031), // L00, irradiance, pre-scaled base
    float3( 0.088918268680573,  0.090477384626865,  0.082568652927876), // L1-1, irradiance, pre-scaled base
    float3( 0.163675427436829,  0.145346075296402,  0.148178622126579), // L10, irradiance, pre-scaled base
    float3( 0.278513789176941,  0.259707301855087,  0.248646423220634), // L11, irradiance, pre-scaled base
    float3( 0.148037433624268,  0.136133864521980,  0.128235682845116), // L2-2, irradiance, pre-scaled base
    float3( 0.256733059883118,  0.240126460790634,  0.226334065198898), // L2-1, irradiance, pre-scaled base
    float3( 0.028114955872297,  0.025194238871336,  0.024876892566681), // L20, irradiance, pre-scaled base
    float3( 0.316204369068146,  0.297764748334885,  0.281155943870544), // L21, irradiance, pre-scaled base
    float3( 0.008149851113558,  0.004791029263288,  0.004512547049671) // L22, irradiance, pre-scaled base
};
const static float iblRoughnessOneLevel = 4;

float3 Irradiance_RoughnessOne(float3 n)
{
    // note: lod used is always integer, hopefully the hardware skips tri-linear filtering
    return DecodeDataForIBL(props.SpecularIBL.SampleLevel(n, iblRoughnessOneLevel));
}

float3 Irradiance_SphericalHarmonics(float3 n)
{
    return max(
          iblSH[0]
        // 2+ bands.
        + iblSH[1] * (n.y)
        + iblSH[2] * (n.z)
        + iblSH[3] * (n.x)
        // 3+ bands.
        + iblSH[4] * (n.y * n.x)
        + iblSH[5] * (n.y * n.z)
        + iblSH[6] * (3.0 * n.z * n.z - 1.0)
        + iblSH[7] * (n.z * n.x)
        + iblSH[8] * (n.x * n.x - n.y * n.y)
        , 0.0);
}

//------------------------------------------------------------------------------
// IBL irradiance dispatch
//------------------------------------------------------------------------------

float3 DiffuseIrradiance(float3 n)
{
    if (iblSH[0].x == 65504.0)
    {
        int width, height, levels;
        props.SpecularIBL.GetDimensions(uint(iblRoughnessOneLevel), width, height, levels);
        int2 s = int2(width, height);
        float du = 1.0 / float(s.x);
        float dv = 1.0 / float(s.y);
        float3 m0 = normalize(cross(n, float3(0.0, 1.0, 0.0)));
        float3 m1 = cross(m0, n);
        float3 m0du = m0 * du;
        float3 m1dv = m1 * dv;
        float3 c;
        c  = Irradiance_RoughnessOne(n - m0du - m1dv);
        c += Irradiance_RoughnessOne(n + m0du - m1dv);
        c += Irradiance_RoughnessOne(n + m0du + m1dv);
        c += Irradiance_RoughnessOne(n - m0du + m1dv);
        return c * 0.25;
    }
    else
    {
        return Irradiance_SphericalHarmonics(n);
    }
}

// ----------------------------------------------------------------
// IBL Specular.
// ----------------------------------------------------------------

float PerceptualRoughnessToLod(float perceptualRoughness)
{
    // The mapping below is a quadratic fit for log2(perceptualRoughness)+iblRoughnessOneLevel when
    // iblRoughnessOneLevel is 4. We found empirically that this mapping works very well for
    // a 256 cubemap with 5 levels used. But also scales well for other iblRoughnessOneLevel values.
    return iblRoughnessOneLevel * perceptualRoughness * (2.0 - perceptualRoughness);
}

float3 PrefilteredRadiance(float3 r, float perceptualRoughness)
{
    float lod = PerceptualRoughnessToLod(perceptualRoughness);
    return DecodeDataForIBL(props.SpecularIBL.SampleLevel(r, 0));
}

float3 GetSpecularDominantDirection(float3 n, float3 r, float roughness)
{
    return lerp(r, n, roughness * roughness);
}

float3 SpecularDFG(Material mat)
{
    return lerp(mat.dfg.xxx, mat.dfg.yyy, mat.f0);
}

float3 GetReflectedVector(Material mat, Fragment frag, float3 n)
{
    return GetSpecularDominantDirection(n, frag.reflected, mat.roughness);
}

// ----------------------------------------------------------------
// IBL evaluation.
// ----------------------------------------------------------------
float3 EvaluateSpecularIBL(float3 r, float perceptualRoughness)
{
    // This assumes a 256x256 cubemap, with 9 mip levels
    float lod = 8.0 * perceptualRoughness;
    // decodeEnvironmentMap() either decodes RGBM or is a no-op if the
    // cubemap is stored in a float texture
    return props.SpecularIBL.SampleLevel(r, lod).rgb;
}

float3 EvaluateIBL(Material mat, Fragment frag)
{
    float NoV = max(dot(frag.normal, frag.viewDir), 0.0);
    float f90 = saturate(dot(mat.f0, float3(50.0 * 0.33)));
    float perceptualRoughness = sqrt(mat.roughness);

    float3 r = GetReflectedVector(mat, frag, frag.normal);
    float3 indirectSpecular = EvaluateSpecularIBL(r, perceptualRoughness);
    float2 env = PrefilteredDFG(perceptualRoughness, NoV).rg;
    float3 specularColor = mat.f0 * env.x + f90 * env.y;

    float3 indirectDiffuse = Irradiance_SphericalHarmonics(frag.normal) * Fd_Lambert();

    return (mat.diffuseColor * indirectDiffuse + indirectSpecular * specularColor) * mat.occlusion;

    // TODO: Figure out why this implementation is wrong.
    // Specular
    float3 Fr = 0;
    float3 E = SpecularDFG(mat);
    Fr = E * PrefilteredRadiance(r, perceptualRoughness);

    // Diffuse
    float3 diffuseIrradiance = DiffuseIrradiance(frag.normal);

    float3 Fd = mat.diffuseColor * diffuseIrradiance * (1.0 - E) * mat.occlusion;

    //Fr *= frameUniforms.iblLuminance;
    //Fd *= frameUniforms.iblLuminance;

    return Fd;
}