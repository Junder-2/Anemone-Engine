#pragma once

#include "Filament-BRDF.slangh"
#include "Filament-Material.slangh"
#include "Filament-Fragment.slangh"
#include "Filament-Light.slangh"

float3 IsotropicLobe(Material material, Light light, float3 halfDir,
    float NoV, float NoL, float NoH, float LoH)
{
    float D = Distribution(material.roughness, NoH, halfDir);
    float V = Visibility(material.roughness, NoV, NoL);
    float3 F = Fresnel(material.f0, LoH);

    return (D * V) * F;
}

float3 SpecularLobe(
    Material material, Light light, float3 halfDir,
    float NoV, float NoL, float NoH, float LoH)
{
    return IsotropicLobe(material, light, halfDir, NoV, NoL, NoH, LoH);
}

float3 DiffuseLobe(Material material, float NoV, float NoL, float LoH)
{
    return material.diffuseColor * Diffuse(material.roughness, NoV, NoL, LoH);
}

float3 SurfaceShading(Material material, Fragment fragment, Light light)
{
    float3 normal = fragment.normal; // Normal in ws.
    float3 lightDir = -light.direction; // Direction to light in ws.
    float3 viewDir = fragment.viewDir; // Direction to camera in ws.
    float3 halfDir = normalize(viewDir + lightDir);

    float NoV = abs(dot(normal, viewDir)) + 1e-5;
    float NoL = saturate(dot(normal, lightDir));
    float NoH = saturate(dot(normal, halfDir));
    float LoH = saturate(dot(lightDir, halfDir));

    float3 Fr = SpecularLobe(material, light, halfDir, NoV, NoL, NoH, LoH);
    float3 Fd = DiffuseLobe(material, NoV, NoL, LoH);

    float3 color = Fd + Fr /* * fragment.energyCompensation */;

    return color * light.color * (NoL * material.occlusion);
}